import telebot
import json
import os
from datetime import datetime
from keys import *

DATA_FILE = 'duty_data.json'
bot = telebot.TeleBot(TOKEN)


def load_data():
    if not os.path.exists(DATA_FILE):
        data = {
            'current_duty_index': 0,
            'duty_list': ["–ê—Ä—Ç–µ–º", "–°–ª–∞–≤–∞", "–ê–ª–∏"]
        }
        with open(DATA_FILE, 'w') as file:
            json.dump(data, file)
        return data

    try:
        with open(DATA_FILE, 'r') as file:
            data = json.load(file)
            if 'duty_list' not in data:
                data['duty_list'] = ["–ê—Ä—Ç–µ–º", "–°–ª–∞–≤–∞", "–ê–ª–∏"]
                save_data(data)
            return data
    except json.JSONDecodeError:
        data = {
            'current_duty_index': 0,
            'duty_list': ["–ê—Ä—Ç–µ–º", "–°–ª–∞–≤–∞", "–ê–ª–∏"]
        }
        with open(DATA_FILE, 'w') as file:
            json.dump(data, file)
        return data



def save_data(data):
    with open(DATA_FILE, 'w') as file:
        json.dump(data, file)


def send_duty_message():
    data = load_data()
    current_duty_index = data['current_duty_index']
    duty_list = data['duty_list']

    duty_person = duty_list[current_duty_index]
    message = f"–°–µ–≥–æ–¥–Ω—è –¥–µ–∂—É—Ä–∏—Ç: {duty_person} üßπ"
    bot.send_message(CHAT_ID, message)

    next_duty_index = (current_duty_index + 1) % len(duty_list)
    data['current_duty_index'] = next_duty_index
    save_data(data)


@bot.message_handler(commands=['info'])
def send_duty_info(message):
    data = load_data()
    current_duty_index = data['current_duty_index']
    duty_list = data['duty_list']

    duty_person = duty_list[current_duty_index]
    info_message = f"–ù–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –¥–µ–∂—É—Ä–∏—Ç: {duty_person} üßπ"

    bot.send_message(message.chat.id, info_message)


@bot.message_handler(commands=['add'])
def add_duty_person(message):
    try:
        new_person = message.text.split(maxsplit=1)[1].strip()
        if not new_person:
            raise ValueError("–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ.")

        data = load_data()
        duty_list = data['duty_list']

        duty_list.append(new_person)
        data['duty_list'] = duty_list
        save_data(data)

        bot.reply_to(message, f"‚úÖ {new_person} –¥–æ–±–∞–≤–ª–µ–Ω(–∞) –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–∂—É—Ä–Ω—ã—Ö.")
    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –¥–µ–∂—É—Ä–Ω–æ–≥–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: /add –ò–≤–∞–Ω")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


@bot.message_handler(commands=['remove'])
def remove_duty_person(message):
    try:
        person_to_remove = message.text.split(maxsplit=1)[1].strip()
        if not person_to_remove:
            raise ValueError("–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ.")

        data = load_data()
        duty_list = data['duty_list']
        if person_to_remove in duty_list:
            duty_list.remove(person_to_remove)
            data['duty_list'] = duty_list
            save_data(data)
            bot.reply_to(message, f"‚úÖ {person_to_remove} —É–¥–∞–ª—ë–Ω(–∞) –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö.")
        else:
            bot.reply_to(message, f"‚ùå {person_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω(–∞) –≤ —Å–ø–∏—Å–∫–µ –¥–µ–∂—É—Ä–Ω—ã—Ö.")
    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–µ–∂—É—Ä–Ω–æ–≥–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /remove –ò–≤–∞–Ω")
    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    today = datetime.today()
    if today.weekday() == 6:
        send_duty_message()
    bot.polling(none_stop=True)